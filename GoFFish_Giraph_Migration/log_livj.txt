  Superstep ActivePartitions ActiveVM MigrationCost P_MAX V_MAX Total_TIME
1         1                1        1             0  5944  5944       5944

[1 rows x 7 columns]
{0: [0]}
===================Superstep2================
running Preference 1 : RUN FFD
preload partition 1 on vm 0
preload partition 3 on vm 1
preload partition 7 on vm 2
preload partition 4 on vm 3
preload partition 5 on vm 4
preload partition 2 on vm 5
preload partition 6 on vm 6
**FFD solution satisfied the constraint**
===================Superstep3================
running Preference 1 : RUN FFD
******************Preference 2: LOSS GAIN APPROACH by avoiding migration*************
partition_to_compute_score
[1]
send_bottleneck_flag
1
partition_score
{1: 194.33333333333337}
avoid migration for pid 1 do not send it from vmid 0 to vmid 4
-----------inside avoid_migration_for_partition()------------
vm_send_map
{0: set([]), 1: set([]), 2: set([]), 3: set([]), 4: set([5]), 5: set([]), 6: set([])}
vm_receive_map
{0: set([]), 1: set([5]), 2: set([]), 3: set([]), 4: set([]), 5: set([]), 6: set([])}
-----------call end avoid_migration_for_partition()------------
partition_to_compute_score
[5]
send_bottleneck_flag
1
partition_score
{5: 60.33333333333337}
avoid migration for pid 5 do not send it from vmid 4 to vmid 1
-----------inside avoid_migration_for_partition()------------
vm_send_map
{0: set([]), 1: set([]), 2: set([]), 3: set([]), 4: set([]), 5: set([]), 6: set([])}
vm_receive_map
{0: set([]), 1: set([]), 2: set([]), 3: set([]), 4: set([]), 5: set([]), 6: set([])}
-----------call end avoid_migration_for_partition()------------
LossGain : Avoid migration satisfied the constrained
===================Superstep4================
running Preference 1 : RUN FFD
******************Preference 2: LOSS GAIN APPROACH by avoiding migration*************
partition_to_compute_score
[2, 0]
send_bottleneck_flag
0
partition_to_compute_score
[2, 0]
on not migrating partititon 2 we have to keep running vm 5
partition_score
{0: 730.3333333333334}
avoid migration for pid 0 do not send it from vmid 0 to vmid 1
-----------inside avoid_migration_for_partition()------------
vm_send_map
{0: set([]), 1: set([]), 2: set([]), 3: set([4]), 4: set([5]), 5: set([2]), 6: set([])}
vm_receive_map
{0: set([4]), 1: set([2]), 2: set([5]), 3: set([]), 4: set([]), 5: set([]), 6: set([])}
-----------call end avoid_migration_for_partition()------------
 the sender vm 3 is dissapearing and receiving is bottleneck
partition_score
{}
 number of bins in avoid_migration approach 4
 *********************** using Preference 3 VM++ superstep 4 *************************
UPPER_LIMIT
808.5
maxTime,539
number of machines to be used 5
partTime {0: 103, 1: 274, 2: 215, 3: 82, 4: 254, 5: 238, 6: 539, 7: 251}
{0: [0, 1], 1: [3], 2: [7], 3: [4], 4: [5], 5: [2], 6: [6]}
bin_partition_map
{0: [1], 1: [4, 3], 2: [7, 0], 3: [5, 2], 4: [6]}
bin_vm_map
{0: 0, 1: 1, 2: 2, 3: 4, 4: 6}
In VM++ approach trying the avoid migration approach with 5 vms and 8 partitions and already spawned 7 vms superstep4
PhysicalVM_Partition_Map
{0: [0, 1], 1: [3], 2: [7], 3: [4], 4: [5], 5: [2], 6: [6]}
vm_computetimesum_map{0: 274, 1: 336, 2: 354, 4: 453, 6: 539}
------------------------------------------------------------------------------------
partition_to_compute_score
[0]
send_bottleneck_flag
1
partition_score
{0: 730.3333333333334}
avoid migration for pid 0 do not send it from vmid 0 to vmid 2
-----------inside avoid_migration_for_partition()------------
vm_send_map
{0: set([]), 1: set([]), 2: set([]), 3: set([4]), 4: set([]), 5: set([2]), 6: set([])}
vm_receive_map
{0: set([]), 1: set([4]), 2: set([]), 3: set([]), 4: set([2]), 5: set([]), 6: set([])}
-----------call end avoid_migration_for_partition()------------
network_cost_list [0.0, 833.3333333333334, 0.0, 833.3333333333334, 833.3333333333334, 833.3333333333334, 0.0]
compute_cost_list [377, 336, 251, 0, 453, 0, 539]
------------------------------------------------------------------------------------
 the sender vm 3 is dissapearing and receiving is bottleneck
partition_score
{}
bottlneck_vmid
3
no partition scores computed
vm_send_map
{0: set([]), 1: set([]), 2: set([]), 3: set([4]), 4: set([]), 5: set([2]), 6: set([])}
vm_receive_map
{0: set([]), 1: set([4]), 2: set([]), 3: set([]), 4: set([2]), 5: set([]), 6: set([])}
vm_computetimesum_map
{0: 377, 1: 336, 2: 251, 4: 453, 6: 539}
 number of bins in avoid_migration approach 5
number of machines to be used 6
partTime {0: 103, 1: 274, 2: 215, 3: 82, 4: 254, 5: 238, 6: 539, 7: 251}
{0: [0, 1], 1: [3], 2: [7], 3: [4], 4: [5], 5: [2], 6: [6]}
bin_partition_map
{0: [7], 1: [4], 2: [1], 3: [2, 0], 4: [5, 3], 5: [6]}
bin_vm_map
{0: 2, 1: 3, 2: 0, 3: 5, 4: 1, 5: 6}
In VM++ approach trying the avoid migration approach with 6 vms and 8 partitions and already spawned 7 vms superstep4
PhysicalVM_Partition_Map
{0: [0, 1], 1: [3], 2: [7], 3: [4], 4: [5], 5: [2], 6: [6]}
vm_computetimesum_map{0: 274, 1: 320, 2: 251, 3: 254, 5: 318, 6: 539}
------------------------------------------------------------------------------------
partition_to_compute_score
[0]
send_bottleneck_flag
1
partition_score
{0: 730.3333333333334}
avoid migration for pid 0 do not send it from vmid 0 to vmid 5
-----------inside avoid_migration_for_partition()------------
vm_send_map
{0: set([]), 1: set([]), 2: set([]), 3: set([]), 4: set([5]), 5: set([]), 6: set([])}
vm_receive_map
{0: set([]), 1: set([5]), 2: set([]), 3: set([]), 4: set([]), 5: set([]), 6: set([])}
-----------call end avoid_migration_for_partition()------------
network_cost_list [0.0, 833.3333333333334, 0.0, 0.0, 833.3333333333334, 0.0, 0.0]
compute_cost_list [377, 320, 251, 254, 0, 215, 539]
------------------------------------------------------------------------------------
 the sender vm 4 is dissapearing and receiving is bottleneck
partition_score
{}
bottlneck_vmid
4
no partition scores computed
vm_send_map
{0: set([]), 1: set([]), 2: set([]), 3: set([]), 4: set([5]), 5: set([]), 6: set([])}
vm_receive_map
{0: set([]), 1: set([5]), 2: set([]), 3: set([]), 4: set([]), 5: set([]), 6: set([])}
vm_computetimesum_map
{0: 377, 1: 320, 2: 251, 3: 254, 5: 215, 6: 539}
 number of bins in avoid_migration approach 6
number of machines to be used 7
partTime {0: 103, 1: 274, 2: 215, 3: 82, 4: 254, 5: 238, 6: 539, 7: 251}
{0: [0, 1], 1: [3], 2: [7], 3: [4], 4: [5], 5: [2], 6: [6]}
bin_partition_map
{0: [0, 3], 1: [2], 2: [5], 3: [7], 4: [4], 5: [1], 6: [6]}
bin_vm_map
{0: 1, 1: 5, 2: 4, 3: 2, 4: 3, 5: 0, 6: 6}
In VM++ approach trying the avoid migration approach with 7 vms and 8 partitions and already spawned 7 vms superstep4
PhysicalVM_Partition_Map
{0: [0, 1], 1: [3], 2: [7], 3: [4], 4: [5], 5: [2], 6: [6]}
vm_computetimesum_map{0: 274, 1: 185, 2: 251, 3: 254, 4: 238, 5: 215, 6: 539}
------------------------------------------------------------------------------------
partition_to_compute_score
[0]
send_bottleneck_flag
1
partition_score
{0: 730.3333333333334}
avoid migration for pid 0 do not send it from vmid 0 to vmid 1
-----------inside avoid_migration_for_partition()------------
vm_send_map
{0: set([]), 1: set([]), 2: set([]), 3: set([]), 4: set([]), 5: set([]), 6: set([])}
vm_receive_map
{0: set([]), 1: set([]), 2: set([]), 3: set([]), 4: set([]), 5: set([]), 6: set([])}
-----------call end avoid_migration_for_partition()------------
network_cost_list [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
compute_cost_list [377, 82, 251, 254, 238, 215, 539]
===================Superstep5================
running Preference 1 : RUN FFD
******************Preference 2: LOSS GAIN APPROACH by avoiding migration*************
partition_to_compute_score
[0]
send_bottleneck_flag
1
partition_score
{0: 811.3333333333334}
avoid migration for pid 0 do not send it from vmid 0 to vmid 1
-----------inside avoid_migration_for_partition()------------
vm_send_map
{0: set([]), 1: set([]), 2: set([]), 3: set([]), 4: set([]), 5: set([]), 6: set([])}
vm_receive_map
{0: set([]), 1: set([]), 2: set([]), 3: set([]), 4: set([]), 5: set([]), 6: set([])}
-----------call end avoid_migration_for_partition()------------
LossGain : Avoid migration satisfied the constrained
===================Superstep6================
running Preference 1 : RUN FFD
******************Preference 2: LOSS GAIN APPROACH by avoiding migration*************
partition_to_compute_score
[4, 6]
send_bottleneck_flag
0
partition_to_compute_score
[4, 6]
on not migrating partititon 4 we have to keep running vm 3
on not migrating partititon 6 we have to keep running vm 6
partition_score
{}
 number of bins in avoid_migration approach 4
 *********************** using Preference 3 VM++ superstep 6 *************************
UPPER_LIMIT
25.5
maxTime,17
number of machines to be used 5
partTime {0: 1, 1: 8, 2: 17, 3: 6, 4: 8, 5: 4, 6: 3, 7: 9}
{0: [1, 0], 1: [3], 2: [7], 3: [4], 4: [5], 5: [2], 6: [6]}
bin_partition_map
{0: [1, 0], 1: [7], 2: [3, 5], 3: [4, 6], 4: [2]}
bin_vm_map
{0: 0, 1: 2, 2: 1, 3: 3, 4: 5}
In VM++ approach trying the avoid migration approach with 5 vms and 8 partitions and already spawned 7 vms superstep6
PhysicalVM_Partition_Map
{0: [1, 0], 1: [3], 2: [7], 3: [4], 4: [5], 5: [2], 6: [6]}
vm_computetimesum_map{0: 9, 1: 10, 2: 9, 3: 11, 5: 17}
------------------------------------------------------------------------------------
 the sender vm 4 is dissapearing and receiving is bottleneck
partition_score
{}
bottlneck_vmid
4
no partition scores computed
vm_send_map
{0: set([]), 1: set([]), 2: set([]), 3: set([]), 4: set([5]), 5: set([]), 6: set([6])}
vm_receive_map
{0: set([]), 1: set([5]), 2: set([]), 3: set([6]), 4: set([]), 5: set([]), 6: set([])}
vm_computetimesum_map
{0: 9, 1: 10, 2: 9, 3: 11, 5: 17}
 number of bins in avoid_migration approach 5
number of machines to be used 6
partTime {0: 1, 1: 8, 2: 17, 3: 6, 4: 8, 5: 4, 6: 3, 7: 9}
{0: [1, 0], 1: [3], 2: [7], 3: [4], 4: [5], 5: [2], 6: [6]}
bin_partition_map
{0: [3, 0], 1: [5, 6], 2: [1], 3: [4], 4: [7], 5: [2]}
bin_vm_map
{0: 1, 1: 4, 2: 0, 3: 3, 4: 2, 5: 5}
In VM++ approach trying the avoid migration approach with 6 vms and 8 partitions and already spawned 7 vms superstep6
PhysicalVM_Partition_Map
{0: [1, 0], 1: [3], 2: [7], 3: [4], 4: [5], 5: [2], 6: [6]}
vm_computetimesum_map{0: 8, 1: 7, 2: 9, 3: 8, 4: 7, 5: 17}
------------------------------------------------------------------------------------
partition_to_compute_score
[0]
send_bottleneck_flag
1
partition_score
{0: 832.3333333333334}
avoid migration for pid 0 do not send it from vmid 0 to vmid 1
-----------inside avoid_migration_for_partition()------------
vm_send_map
{0: set([]), 1: set([]), 2: set([]), 3: set([]), 4: set([]), 5: set([]), 6: set([6])}
vm_receive_map
{0: set([]), 1: set([]), 2: set([]), 3: set([]), 4: set([6]), 5: set([]), 6: set([])}
-----------call end avoid_migration_for_partition()------------
network_cost_list [0.0, 0.0, 0.0, 0.0, 833.3333333333334, 0.0, 833.3333333333334]
compute_cost_list [9, 6, 9, 8, 7, 17, 0]
------------------------------------------------------------------------------------
 the sender vm 6 is dissapearing and receiving is bottleneck
partition_score
{}
bottlneck_vmid
6
no partition scores computed
vm_send_map
{0: set([]), 1: set([]), 2: set([]), 3: set([]), 4: set([]), 5: set([]), 6: set([6])}
vm_receive_map
{0: set([]), 1: set([]), 2: set([]), 3: set([]), 4: set([6]), 5: set([]), 6: set([])}
vm_computetimesum_map
{0: 9, 1: 6, 2: 9, 3: 8, 4: 7, 5: 17}
 number of bins in avoid_migration approach 6
number of machines to be used 7
partTime {0: 1, 1: 8, 2: 17, 3: 6, 4: 8, 5: 4, 6: 3, 7: 9}
{0: [1, 0], 1: [3], 2: [7], 3: [4], 4: [5], 5: [2], 6: [6]}
bin_partition_map
{0: [6, 0], 1: [5], 2: [3], 3: [1], 4: [4], 5: [7], 6: [2]}
bin_vm_map
{0: 6, 1: 4, 2: 1, 3: 0, 4: 3, 5: 2, 6: 5}
In VM++ approach trying the avoid migration approach with 7 vms and 8 partitions and already spawned 7 vms superstep6
PhysicalVM_Partition_Map
{0: [1, 0], 1: [3], 2: [7], 3: [4], 4: [5], 5: [2], 6: [6]}
vm_computetimesum_map{0: 8, 1: 6, 2: 9, 3: 8, 4: 4, 5: 17, 6: 4}
------------------------------------------------------------------------------------
partition_to_compute_score
[0]
send_bottleneck_flag
1
partition_score
{0: 832.3333333333334}
avoid migration for pid 0 do not send it from vmid 0 to vmid 6
-----------inside avoid_migration_for_partition()------------
vm_send_map
{0: set([]), 1: set([]), 2: set([]), 3: set([]), 4: set([]), 5: set([]), 6: set([])}
vm_receive_map
{0: set([]), 1: set([]), 2: set([]), 3: set([]), 4: set([]), 5: set([]), 6: set([])}
-----------call end avoid_migration_for_partition()------------
network_cost_list [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
compute_cost_list [9, 6, 9, 8, 4, 17, 3]
inside run approach
vm_send_map {0: set([]), 1: set([]), 2: set([]), 3: set([]), 4: set([]), 5: set([]), 6: set([])}
===================Superstep7================
running Preference 1 : RUN FFD
PhysicalVM_Partition_Map
{0: [1, 0], 1: [3], 2: [7], 3: [4], 4: [5], 5: [2], 6: [6]}
Partition_PhysicalVM_Map
{0: 0, 1: 0, 2: 5, 3: 1, 4: 3, 5: 4, 6: 6, 7: 2, 8: -1}
bin_partition_map
{0: [1, 0, 4, 7], 1: [2], 2: [3], 3: [5], 4: [6]}
bin_vm_map
{0: 0, 1: 5, 2: 1, 3: 4, 4: 6}
migration_cost 1666.66666667
vm_computetimesum_map {0: 1, 1: 1, 4: 1, 5: 1, 6: 1}
******************Preference 2: LOSS GAIN APPROACH by avoiding migration*************
partition_to_compute_score
[4, 7]
send_bottleneck_flag
0
partition_to_compute_score
[4, 7]
on not migrating partititon 4 we have to keep running vm 3
on not migrating partititon 7 we have to keep running vm 2
partition_score
{}
 number of bins in avoid_migration approach 5
 *********************** using Preference 3 VM++ superstep 7 *************************
UPPER_LIMIT
1.5
maxTime,1
number of machines to be used 6
partTime {0: 0, 1: 1, 2: 1, 3: 1, 4: 0, 5: 1, 6: 1, 7: 0}
{0: [1, 0], 1: [3], 2: [7], 3: [4], 4: [5], 5: [2], 6: [6]}
bin_partition_map
{0: [0, 4, 7], 1: [1], 2: [2], 3: [3], 4: [5], 5: [6]}
bin_vm_map
{0: 3, 1: 0, 2: 5, 3: 1, 4: 4, 5: 6}
In VM++ approach trying the avoid migration approach with 6 vms and 8 partitions and already spawned 7 vms superstep7
PhysicalVM_Partition_Map
{0: [1, 0], 1: [3], 2: [7], 3: [4], 4: [5], 5: [2], 6: [6]}
vm_computetimesum_map{0: 1, 1: 1, 3: 0, 4: 1, 5: 1, 6: 1}
------------------------------------------------------------------------------------
partition_to_compute_score
[0, 7]
send_bottleneck_flag
0
partition_to_compute_score
[0, 7]
on not migrating partititon 7 we have to keep running vm 2
partition_score
{0: 833.3333333333334}
avoid migration for pid 0 do not send it from vmid 0 to vmid 3
-----------inside avoid_migration_for_partition()------------
vm_send_map
{0: set([]), 1: set([]), 2: set([7]), 3: set([]), 4: set([]), 5: set([]), 6: set([])}
vm_receive_map
{0: set([]), 1: set([]), 2: set([]), 3: set([7]), 4: set([]), 5: set([]), 6: set([])}
-----------call end avoid_migration_for_partition()------------
network_cost_list [0.0, 0.0, 833.3333333333334, 833.3333333333334, 0.0, 0.0, 0.0]
compute_cost_list [1, 1, 0, 0, 1, 1, 1]
------------------------------------------------------------------------------------
 the sender vm 2 is dissapearing and receiving is bottleneck
partition_score
{}
bottlneck_vmid
2
no partition scores computed
vm_send_map
{0: set([]), 1: set([]), 2: set([7]), 3: set([]), 4: set([]), 5: set([]), 6: set([])}
vm_receive_map
{0: set([]), 1: set([]), 2: set([]), 3: set([7]), 4: set([]), 5: set([]), 6: set([])}
vm_computetimesum_map
{0: 1, 1: 1, 3: 0, 4: 1, 5: 1, 6: 1}
 number of bins in avoid_migration approach 6
number of machines to be used 7
partTime {0: 0, 1: 1, 2: 1, 3: 1, 4: 0, 5: 1, 6: 1, 7: 0}
{0: [1, 0], 1: [3], 2: [7], 3: [4], 4: [5], 5: [2], 6: [6]}
bin_partition_map
{0: [0, 4, 7], 1: [], 2: [1], 3: [2], 4: [3], 5: [5], 6: [6]}
bin_vm_map
{0: 2, 1: 3, 2: 0, 3: 5, 4: 1, 5: 4, 6: 6}
In VM++ approach trying the avoid migration approach with 7 vms and 8 partitions and already spawned 7 vms superstep7
PhysicalVM_Partition_Map
{0: [1, 0], 1: [3], 2: [7], 3: [4], 4: [5], 5: [2], 6: [6]}
vm_computetimesum_map{0: 1, 1: 1, 2: 0, 4: 1, 5: 1, 6: 1}
------------------------------------------------------------------------------------
partition_to_compute_score
[0, 4]
send_bottleneck_flag
0
partition_to_compute_score
[0, 4]
partition_score
{0: 833.3333333333334, 4: 833.3333333333334}
avoid migration for pid 4 do not send it from vmid 3 to vmid 2
